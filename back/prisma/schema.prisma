// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// For more info on Prisma, visit https://www.prisma.io/docs
// For more info on Prisma Client, visit https://www.prisma.io/docs/orm/prisma-client
// For more info on Prisma Explicit Relations, visit https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/working-with-many-to-many-relations#explicit-relations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  phone     String?
  birthday  DateTime? // Campo opcional
  allergies String?
  address   String?
  city      String?
  country   String?
  auth0Id   String?
  admin     Boolean   @default(false)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt // DateTime @default(now())
  // +Info, implement soft deletes: https://www.basedash.com/blog/how-to-implement-soft-deletes-in-prisma
  deletedAt DateTime? // Nullable field to track soft deletes

  @@unique([email, auth0Id])
}

model Events {
  id          Int       @id @default(autoincrement())
  title       String
  subtitle    String
  description String
  date        DateTime
  location    String // GPS location, ex: Madrid, Spain, Sol
  maxseats    Int       @default(8)
  price       Float     @default(250.0)
  picture     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt // DateTime @default(now())
  deletedAt   DateTime? // Nullable field to track soft deletes
  bookings    Booking[]
}

model Booking {
  // +Info, visit: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/working-with-many-to-many-relations#explicit-relations
  // id                Int       @id @default(autoincrement())
  // UserId            Int
  // EventsId          Int
  TransactionNumber String    @unique
  Quantity          Int
  Paid              Float
  Date              DateTime  @default(now())
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  events            Events    @relation(fields: [eventsId], references: [id])
  eventsId          Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt // DateTime @default(now())
  deletedAt         DateTime? // Nullable field to track soft deletes

  @@id([userId, eventsId])
  @@index([userId, eventsId])
}
